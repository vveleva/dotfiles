alias ...='cd ../..'
alias a='atom'
alias ack='ack --group --color'
alias b='bundle'
alias be='bundle exec'
alias cms='bundle exec rake db:create db:migrate db:test:prepare db:seed'
alias e="$EDITOR"
alias grep='grep --color'
alias gtypist="gtypist -wSstb --banner-colors=0,0,5,4 --color=2,0"
alias ipy='ipython'
alias l='ls'
alias less='LESSOPEN="|pygmentize -g %s" less -R'
alias ll='ls -alrth'
alias ls='ls -FGha'
alias sl='sl -aFlc'
alias tree='tree -C'
alias v='vim'
alias vi='vim'

alias debug='less ~/Dropbox/debug_list'
alias food='v ~/Dropbox/food_diary/`date +%Y-%m-%d`'
alias diary='v ~/Dropbox/diary/`date +%Y-%m-%d`'
alias notes='v ~/Dropbox/notes'
alias wnotes='v ~/Dropbox/work_notes'
alias taiwan='v ~/Dropbox/taiwan'
alias addresses='v ~/Dropbox/addresses.txt'

alias standup='v ~/Google\ Drive/work_standup/`+%Y`'

getip() { dig +short "$@" @resolver1.opendns.com }
alias getmyip='getip myip.opendns.com'

# git
unwip() {
  glog=`git log -1 --pretty=%B`;
  if [[ $glog == "wip" ]]; then g reset HEAD^;
  else echo "last commit is not wip";
  fi
}
alias wip='git add -A; git commit -m wip'
alias etl='psql -d production -h localhost -p 5403 -U etl'

alias locate='mdfind -name'
alias jumpstat="autojump --stat"
alias snippets="cd ~/.vim/bundle/vim-snippets/snippets"
alias path="echo $PATH | tr -s ':' '\n'"

if [[ -x `which nc` ]]; then
  alias nyan='nc -v nyancat.dakko.us 23' # nyan cat
fi

gcm() { temp=`ruby jira.rb HT-$@`; git commit -em $temp; }
gcb() { git checkout -b "$@"; }
gdv() { git diff -w "$@" | view - }

fpg() { find | grep "$@"; }



alias bubu="brew update && brew upgrade && brew cleanup"

alias ta='tmux attach -t'
alias ts='tmux new-session -s'
alias tl='tmux list-sessions'
alias tksv='tmux kill-server'
alias tkss='tmux kill-session -t'

terminal_colors() {
  for x in 0 1 4 5 7 8;
    do for i in `seq 30 37`;
      do for a in `seq 40 47`;
        do echo -ne "\e[$x;$i;$a""m\\\e[$x;$i;$a""m\e[0;37;40m "; done;
        echo;
      done;
    done;
  echo "";
}

iterm_colors() {
  clear_str="\e[0m"
              black="Black    "
                red="Red      "
              green="Green    "
             yellow="Yellow   "
               blue="Blue     "
            magenta="Magenta  "
               cyan="Cyan     "
              white="White    "
          light_black="B Black  "
          light_red="B Red    "
        light_green="B Green  "
       light_yellow="B Yellow "
         light_blue="B Blue   "
      light_magenta="B Magenta"
         light_cyan="B Cyan   "
        light_white="B White  "

            spacing="         "
          black_hex=" #263338 "
            red_hex=" #dc312e "
          green_hex=" #859901 "
         yellow_hex=" #b58900 "
           blue_hex=" #268ad2 "
        magenta_hex=" #d33582 "
           cyan_hex=" #2aa197 "
          white_hex=" #eee8d5 "
    light_black_hex=" #1e2b30 "
      light_red_hex=" #cb4a16 "
    light_green_hex=" #586d74 "
   light_yellow_hex=" #657b82 "
     light_blue_hex=" #839495 "
  light_magenta_hex=" #6c6ec6 "
     light_cyan_hex=" #93a0a1 "
    light_white_hex=" #fdf6e3 "

  declare -A color_hex
  color_hex[0]=$black_hex
  color_hex[1]=$red_hex
  color_hex[2]=$green_hex
  color_hex[3]=$yellow_hex
  color_hex[4]=$blue_hex
  color_hex[5]=$magenta_hex
  color_hex[6]=$cyan_hex
  color_hex[7]=$white_hex
  color_hex[8]=$light_black_hex
  color_hex[9]=$light_red_hex
  color_hex[10]=$light_green_hex
  color_hex[11]=$light_yellow_hex
  color_hex[12]=$light_blue_hex
  color_hex[13]=$light_magenta_hex
  color_hex[14]=$light_cyan_hex
  color_hex[15]=$light_white_hex

  declare -A color_bg
  color_bg[0]="\e[0m"
  color_bg[1]="\e[31m"
  color_bg[2]="\e[32m"
  color_bg[3]="\e[33m"
  color_bg[4]="\e[34m"
  color_bg[5]="\e[35m"
  color_bg[6]="\e[36m"
  color_bg[7]="\e[37m"
  color_bg[8]="\e[0m"
  color_bg[9]="\e[91m"
  color_bg[10]="\e[92m"
  color_bg[11]="\e[93m"
  color_bg[12]="\e[94m"
  color_bg[13]="\e[95m"
  color_bg[14]="\e[96m"
  color_bg[15]="\e[97m"

  declare -A colors
  colors[0]=$black
  colors[1]=$red
  colors[2]=$green
  colors[3]=$yellow
  colors[4]=$blue
  colors[5]=$magenta
  colors[6]=$cyan
  colors[7]=$white
  colors[8]=$light_black
  colors[9]=$light_red
  colors[10]=$light_green
  colors[11]=$light_yellow
  colors[12]=$light_blue
  colors[13]=$light_magenta
  colors[14]=$light_cyan
  colors[15]=$light_white

  text_color="\e[0;30;40m"
  text_color_invert="\e[0;37;40m"
  declare -A text_colors
  text_colors[0]=$text_color_invert
  text_colors[1]=$text_color
  text_colors[2]=$text_color
  text_colors[3]=$text_color
  text_colors[4]=$text_color
  text_colors[5]=$text_color
  text_colors[6]=$text_color
  text_colors[7]=$text_color
  text_colors[8]=$text_color_invert
  text_colors[9]=$text_color
  text_colors[10]=$text_color
  text_colors[11]=$text_color
  text_colors[12]=$text_color
  text_colors[13]=$text_color
  text_colors[14]=$text_color
  text_colors[15]=$text_color

  for i in {0..94}; do echo -en $clear_str"\e[4m "$clear_str ; done ; echo;
  echo ''
  for i in {0..7}; do echo -en "\e[48;5;${i}m"  $spacing  $clear_str" " ; done ; echo;
  for i in {0..7}; do echo -en $text_colors[$i]"\e[48;5;${i}m"  $color_hex[$i]  $clear_str" " ; done ; echo;
  for i in {0..7}; do echo -en "\e[48;5;${i}m"  $spacing  $clear_str" " ; done ; echo;
  for i in {0..7}; do echo -en "\e[48;5;${i}m"$clear_str  $color_bg[$i]$colors[$i] " "  ; done ; echo;

  for i in {0..94}; do echo -en $clear_str"\e[4m "$clear_str ; done ; echo;
  echo ''

  for i in {8..15}; do echo -en "\e[48;5;${i}m"  $spacing  $clear_str" " ; done ; echo;
  for i in {8..15}; do echo -en $text_colors[$i]"\e[48;5;${i}m"  $color_hex[$i]  $clear_str" " ; done ; echo;
  for i in {8..15}; do echo -en "\e[48;5;${i}m"  $spacing  $clear_str" " ; done ; echo;
  for i in {8..15}; do echo -en "\e[48;5;${i}m"$clear_str  $color_bg[$i]$colors[$i]  " " ; done ; echo;

  for i in {0..94}; do echo -en $clear_str"\e[4m "$clear_str ; done ; echo;
  echo ''
}

colors() { awk 'BEGIN{
  s="/\\/\\/\\/\\/\\"; s=s s s s s s s s s s s s s s s s s s s s s s s;
  for (colnum = 0; colnum<256; colnum++) {
    r = 255-(colnum * 255 / 255);
    g = (colnum * 510 / 255);
    b = (colnum * 255 / 255);
    if (g > 255) g = 510 - g;
    printf "\033[48;2;%d;%d;%dm", r,g,b;
    printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
    printf "%s\033[0m", substr(s,colnum+1,1);
  }
  printf "\n";
}' }
